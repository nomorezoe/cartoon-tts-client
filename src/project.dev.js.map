{"version":3,"sources":["assets/Scripts/game/CamMove.js","assets/Scripts/game/Eye.js","assets/Scripts/game/Game.js","assets/Scripts/loading/Loading.js","assets/Scripts/game/MusicToggle.js"],"names":["CamAdjust","cc","Class","extends","Component","properties","cameras","Camera","sceneNodes","Node","infos","vx","vy","ax","maxV","rotRangeX","rotRangeY","screenWidth","designResolutionHeight","designResolutionHeight_2","onLoad","this","view","getDesignResolutionSize","height","getCanvasSize","width","i","length","info","x","eulerAngles","y","push","node","on","EventType","TOUCH_MOVE","onTouchMove","MOUSE_MOVE","onMouseMove","onDestroy","off","evt","targetY","_x","targetX","Math","pow","_y","currentX","currentY","timeY","abs","timeX","console","log","rotate3DTo","max","v3","stopAllActions","runAction","easing","easeOut","stage","eye","randX","randY","mouseMoveHandler","touchMoveHandler","worldPos","convertToWorldSpaceAR","v2","getLocationX","getLocationY","pos","convertToNodeSpaceAR","len","tan","ctan","min","len2","posX","posY","setPosition","editBox","EditBox","audioID","mouthNode","mouthIsReset","isLocalHost","window","location","href","indexOf","urlAddress","socket","io","transports","handleConnect","bind","onTTSCompleted","id","file","audioInfo","remoteUrl","loader","load","url","type","err","res","audioEngine","play","audioOffset","updateMouth","setFinishCallback","sendHandler","sendText","string","emit","getChildByName","node2","active","update","dt","time","getCurrentTime","progressBar","ProgressBar","director","preloadScene","onProgress","onComplete","completedCount","totalCount","progress","error","loadScene","onNode","offNode","hintNode","hintText","Label","audioId","music","AudioClip","isMusicOn","sys","localStorage","getItem","toggleOn","toggleOff","toggleOver","toggleOut","pauseMusic","resumeMusic","playMusic"],"mappings":"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","sourcesContent":["let CamAdjust = cc.Class({\n    extends: cc.Component,\n\n    properties:{\n        cameras: [cc.Camera], \n        sceneNodes: [cc.Node],\n        infos: null,\n        vx:0,\n        vy:0, \n        ax:0.1,\n        maxV:0.3,\n\n        /*rotX:0,\n        rotY:0,\n\n        posX: 0, \n        posY: 0,*/\n\n        rotRangeX: 1,\n        rotRangeY: 10,\n\n        //moveRangeX: 50,\n        //moveRangeY: 10,\n\n        screenWidth: 0,\n        designResolutionHeight:0,\n        designResolutionHeight_2:0,\n    },\n\n    onLoad: function(){\n        this.screenWidth = cc.view.getDesignResolutionSize().height / cc.view.getCanvasSize().height * cc.view.getCanvasSize().width;\n        this.designResolutionHeight = cc.view.getDesignResolutionSize().height;\n        this.designResolutionHeight_2 = cc.view.getDesignResolutionSize().height/2;\n        /*this.rotX =  this.cameras[0].node.eulerAngles.x;\n        this.rotY =  this.cameras[0].node.eulerAngles.y;\n\n        this.posX = this.cameras[0].node.position.x;\n        this.posY = this.cameras[0].node.position.y;\n        //console.log(this.rotX, this.rotY);*/\n        this.infos = [];\n        for(let i = 0;i < this.sceneNodes.length; i++){\n            let info = {x: this.sceneNodes[i].eulerAngles.x, y:this.sceneNodes[i].eulerAngles.y};\n            this.infos.push(info);\n        }\n\n        this.node.on(cc.Node.EventType.TOUCH_MOVE, this.onTouchMove, this);\n        this.node.on(cc.Node.EventType.MOUSE_MOVE, this.onMouseMove, this);\n\n        \n     },\n \n     onDestroy: function(){\n        this.node.off(cc.Node.EventType.TOUCH_MOVE, this.onTouchMove, this);\n        this.node.on(cc.Node.EventType.MOUSE_MOVE, this.onMouseMove, this);\n     },\n\n     onTouchMove: function(evt){\n       // this.onMouseMove(evt);\n     },\n\n     onMouseMove: function(evt){ \n        // console.log(this.screenWidth/2 - evt._x, this.screenWidth/2);\n         let targetY = (this.screenWidth/2 - evt._x)/ (this.screenWidth/2) * this.rotRangeY;\n         let targetX = - Math.pow( 1- evt._y  / this.designResolutionHeight, 3)* this.rotRangeX * 2;\n\n         //let targetMoveX = (this.screenWidth/2 - evt._x)/ (this.screenWidth/2) * this.moveRangeX + this.posX;\n         //let targetMoveY = ( evt._y - this.designResolutionHeight_2 ) / this.designResolutionHeight_2 *this.moveRangeY + this.posY;\n\n        // console.log(\"target\", targetX, targetY);\n        let currentX = this.sceneNodes[0].eulerAngles.x;\n        let currentY = this.sceneNodes[0].eulerAngles.y;\n\n        let timeY =  Math.abs(targetY - currentY)/this.rotRangeY;\n        let timeX = Math.abs(targetX - currentX)/this.rotRangeX;\n        console.log('time', timeX, timeY);\n        \n         for(let i = 0; i < this.sceneNodes.length; i++){\n            \n            let rotate3DTo = cc.rotate3DTo(Math.max(timeX, timeY), cc.v3(targetX + this.infos[i].x, targetY +  this.infos[i].y, 0));\n           // let move3DTo = cc.moveTo(1, cc.v3(targetMoveX, targetMoveY, 0));\n           //console.log(targetMoveX,targetMoveY);\n           // this.cameras[i].node.stopAllActions();\n           // this.cameras[i].node.runAction(cc.spawn(rotate3DTo, move3DTo));\n\n           \n            this.sceneNodes[i].stopAllActions();\n           this.sceneNodes[i].runAction(rotate3DTo.easing(cc.easeOut(1.0)));\n         }\n        \n    },\n});","cc.Class({\n    extends: cc.Component,\n\n    properties:{\n        stage:cc.Node,\n        eye: cc.Node\n    },\n\n    onLoad () {\n        this.randX =8;\n        this.randY = 1.5;\n       // this.stage.on(cc.Node.EventType.TOUCH_MOVE, this.touchMoveHandler, this);\n        this.stage.on(cc.Node.EventType.MOUSE_MOVE, this.mouseMoveHandler, this);\n    },\n\n    touchMoveHandler(evt){\n        console.log(evt);\n    },\n\n    mouseMoveHandler(evt){\n        \n        let worldPos = this.stage.convertToWorldSpaceAR(cc.v2(evt.getLocationX(), evt.getLocationY()));\n        //console.log(\"world\",worldPos.x, worldPos.y);\n        worldPos = cc.v2(evt.getLocationX(), evt.getLocationY());\n        let pos = this.node.convertToNodeSpaceAR(worldPos);\n        //console.log(pos.x , pos.y);\n\n        //this.eye.setPosition(pos.x, pos.y);\n\n        let  len = 0;\n        let tan = 0;\n        let ctan  = 0;\n        if(pos.x!= 0 && pos.y !=0){\n            if(pos.x < 0){\n                pos.x = Math.max(pos.x, -8);\n            }\n            else{\n                pos.x = Math.min(pos.x, 8);\n            }\n            if(pos.y < 0){\n                pos.y = Math.max(pos.y, -1.5);\n            }\n            else{\n                pos.y = Math.min(pos.y, 1.5);\n            }\n            let len2 = Math.pow(pos.x, 2) * Math.pow(pos.y, 2)/(Math.pow(pos.x, 2) + Math.pow(pos.y, 2));\n            len = Math.pow(len2, 0.5);\n        \n            tan = pos.y / len;\n            ctan = pos.x / len;\n        }\n\n       \n        let posX = len * ctan;\n        let posY = len * tan;\n\n        this.eye.setPosition(posX, posY);\n        console.log(\"set pos\", posX, posY);\n\n\n    }\n})","// Learn cc.Class:\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        editBox:cc.EditBox,\n        audioID:-1, \n        mouthNode: cc.Node,\n        mouthIsReset: true\n        \n    },\n\n    onLoad () {\n\n        let isLocalHost = false;\n        if(window.location.href.indexOf(\"localhost\")!=-1 || window.location.href.indexOf(\"127.0.0.1\")!=-1){\n            isLocalHost = true;\n        }\n        console.log(\"isLocalHost\", isLocalHost);\n\n        this.urlAddress = isLocalHost ? \"http://127.0.0.1:3000\":\"http://13.115.222.147:3000\";\n        this.socket = new window.io(this.urlAddress, {transports: ['websocket', 'polling', 'flashsocket']});\n\n        this.socket.on(\"connect\", this.handleConnect.bind(this));\n        this.socket.on(\"onTTSCompleted\", this.onTTSCompleted.bind(this));\n\n    },\n\n    handleConnect(){\n        console.log('connected', this.socket.id); \n    },\n\n    onTTSCompleted(info){\n        if(!info){\n            return;\n        }\n        console.log(\"onTTSCompleted\", info.file, info.info);\n\n        this.audioInfo = info.info;\n\n        let remoteUrl =  this.urlAddress + \"/output/?fileName=\" + info.file;\n        cc.loader.load({url: remoteUrl, type: 'wav'}, function (err, res) {\n            // Use texture to create sprite frame\n            this.audioID = cc.audioEngine.play(res);\n            this.audioOffset = 0;\n            this.updateMouth();\n            \n            cc.audioEngine.setFinishCallback(this.audioID, function () {\n                this.audioID = -1;\n                this.mouthIsReset = false;\n            }.bind(this));\n        }.bind(this));\n    }, \n\n    sendHandler(){\n        let sendText = this.editBox.string;\n        if(sendText == \"\"){\n            return;\n        }\n        this.socket.emit(\"tts\", sendText);\n    }, \n\n    updateMouth(){\n        let id =  this.audioInfo[this.audioOffset].id;\n\n        let node = this.mouthNode.getChildByName(\"mouth_\" + id);\n        if(node){\n            for(let i = 0; i <= 21; i++){\n                let node2 = this.mouthNode.getChildByName(\"mouth_\" + i);\n                node2.active = false;\n            }\n            node.active = true;\n        }\n    },\n\n    update (dt){\n        if(this.audioID != -1){\n            let time = cc.audioEngine.getCurrentTime( this.audioID )\n\n            while( this.audioInfo.length > this.audioOffset \n                && (this.audioInfo[this.audioOffset ].audioOffset < time * 1000 + 15))\n                {\n               // && ((this.audioOffset + 1 >= this.audioInfo.length) || (Math.abs(this.audioInfo[this.audioOffset ].audioOffset - time* 1000 ) > (this.audioInfo[this.audioOffset +1].audioOffset - time* 1000 )))){\n                this.updateMouth();\n                this.audioOffset += 1;\n\n            }\n        }\n        else{\n            if(!this.mouthIsReset){\n                this.mouthIsReset = true;\n                this.mouthNode.getChildByName(\"mouth_0\").active = true;\n\n                for(let i = 1; i <= 21; i++){\n                    let node2 = this.mouthNode.getChildByName(\"mouth_\" + i);\n                    node2.active = false;\n                }\n            }\n        }\n       \n    }\n     \n\n    // update (dt) {},\n});\n","// Learn cc.Class:\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        progressBar:cc.ProgressBar,\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {},\n\n    onLoad () {\n        cc.director.preloadScene(\"game\", this.onProgress.bind(this), this.onComplete.bind(this));\n    },\n\n    onProgress(completedCount, totalCount){\n        this.progressBar.progress = completedCount/totalCount;\n    },\n\n    onComplete(error){\n        if(!error){\n            cc.director.loadScene(\"game\");\n        }\n\n    }\n\n    \n});\n","cc.Class({\n    extends: cc.Component,\n\n    properties:{\n        onNode: cc.Node,\n        offNode:cc.Node,\n        hintNode: cc.Node,\n        hintText: cc.Label,\n        audioId: null,\n        music:cc.AudioClip\n    },\n\n    onLoad(){\n        this.isMusicOn = cc.sys.localStorage.getItem(\"music\");\n        if(this.isMusicOn == null){\n            this.isMusicOn = true;\n        }\n\n        if(this.isMusicOn){\n            this.toggleOn(true);\n        }\n        else{\n            this.toggleOff();\n        }\n\n\n\n       // this.node.on(\"mouseOver\")\n\n    },\n\n    toggleOver(){\n        this.hintNode.active = true;\n    },\n\n    toggleOut(){\n        this.hintNode.active = false;\n    },\n\n\n    toggleOff(){\n        this.onNode.active = true;\n        this.offNode.active = false;\n        this.hintText.string = \"Turn Volumn On\";\n\n        if(this.audioId!=null){\n            cc.audioEngine.pauseMusic();\n        }\n    },\n\n    toggleOn(){\n        this.offNode.active = true;\n        this.onNode.active = false;\n        this.hintText.string = \"Turn Volumn Off\";\n\n        if(!this.audioId){\n            this.audioId = cc.audioEngine.playMusic(this.music, true);\n        }\n        else{\n            cc.audioEngine.resumeMusic();\n        }\n    }\n\n});"],"file":"project.dev.js"}