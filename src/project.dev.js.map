{"version":3,"sources":["assets/Scripts/game/CamMove.js","assets/Scripts/game/Eye.js","assets/Scripts/game/Game.js","assets/Scripts/loading/Loading.js","assets/Scripts/game/MusicToggle.js"],"names":["CamAdjust","cc","Class","extends","Component","properties","cameras","Camera","sceneNodes","Node","infos","vx","vy","ax","maxV","rotRangeX","rotRangeY","screenWidth","designResolutionHeight","designResolutionHeight_2","onLoad","this","view","getDesignResolutionSize","height","getCanvasSize","width","i","length","info","x","eulerAngles","y","push","node","on","EventType","TOUCH_MOVE","onTouchMove","MOUSE_MOVE","onMouseMove","onDestroy","off","evt","targetY","_x","targetX","Math","pow","_y","currentX","currentY","timeY","abs","timeX","rotate3DTo","max","v3","stopAllActions","runAction","easing","easeOut","stage","eye","isLeft","Boolean","randX","randY","touchMoveHandler","mouseMoveHandler","worldPos","convertToWorldSpaceAR","v2","getLocationX","getLocationY","pos","convertToNodeSpaceAR","len","tan","ctan","posX","posY","mouseLen2","factor","min","len2","setPosition","editBox","EditBox","audioID","mouthNode","mouthIsReset","historyObjects","sendButton","isLocalHost","window","location","href","indexOf","console","log","onTextLenChange","string","handleConnect","socket","id","onTTSCompleted","audioInfo","lip_sync_animation","remoteUrl","audio_file_link","loader","load","url","type","err","res","audioEngine","play","audioOffset","updateMouth","setFinishCallback","bind","sendHandler","sendText","trim","that","xhr","XMLHttpRequest","requestURL","onreadystatechange","readyState","DONE","status","json","JSON","parse","responseText","index","reply","message","params","stringify","hitory","open","setRequestHeader","send","viseme_id","getChildByName","node2","active","update","dt","time","getCurrentTime","audio_offset_ms","textContent","progressBar","ProgressBar","director","preloadScene","onProgress","onComplete","completedCount","totalCount","progress","error","loadScene","onNode","offNode","hintNode","hintText","Label","audioId","music","AudioClip","default","anim","Animation","isMusicOn","sys","localStorage","getItem","toggleOn","toggleOff","toggleOver","toggleOut","pauseMusic","resumeMusic","playMusic"],"mappings":"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","sourcesContent":["let CamAdjust = cc.Class({\n    extends: cc.Component,\n\n    properties:{\n        cameras: [cc.Camera], \n        sceneNodes: [cc.Node],\n        infos: null,\n        vx:0,\n        vy:0, \n        ax:0.1,\n        maxV:0.3,\n\n        /*rotX:0,\n        rotY:0,\n\n        posX: 0, \n        posY: 0,*/\n\n        rotRangeX: 1,\n        rotRangeY: 10,\n\n        //moveRangeX: 50,\n        //moveRangeY: 10,\n\n        screenWidth: 0,\n        designResolutionHeight:0,\n        designResolutionHeight_2:0,\n    },\n\n    onLoad: function(){\n        this.screenWidth = cc.view.getDesignResolutionSize().height / cc.view.getCanvasSize().height * cc.view.getCanvasSize().width;\n        this.designResolutionHeight = cc.view.getDesignResolutionSize().height;\n        this.designResolutionHeight_2 = cc.view.getDesignResolutionSize().height/2;\n        /*this.rotX =  this.cameras[0].node.eulerAngles.x;\n        this.rotY =  this.cameras[0].node.eulerAngles.y;\n\n        this.posX = this.cameras[0].node.position.x;\n        this.posY = this.cameras[0].node.position.y;\n        //console.log(this.rotX, this.rotY);*/\n        this.infos = [];\n        for(let i = 0;i < this.sceneNodes.length; i++){\n            let info = {x: this.sceneNodes[i].eulerAngles.x, y:this.sceneNodes[i].eulerAngles.y};\n            this.infos.push(info);\n        }\n\n        this.node.on(cc.Node.EventType.TOUCH_MOVE, this.onTouchMove, this);\n        this.node.on(cc.Node.EventType.MOUSE_MOVE, this.onMouseMove, this);\n\n        \n     },\n \n     onDestroy: function(){\n        this.node.off(cc.Node.EventType.TOUCH_MOVE, this.onTouchMove, this);\n        this.node.on(cc.Node.EventType.MOUSE_MOVE, this.onMouseMove, this);\n     },\n\n     onTouchMove: function(evt){\n       // this.onMouseMove(evt);\n     },\n\n     onMouseMove: function(evt){ \n        // console.log(this.screenWidth/2 - evt._x, this.screenWidth/2);\n         let targetY = (this.screenWidth/2 - evt._x)/ (this.screenWidth/2) * this.rotRangeY;\n         let targetX = - Math.pow( 1- evt._y  / this.designResolutionHeight, 3)* this.rotRangeX * 2;\n\n         //let targetMoveX = (this.screenWidth/2 - evt._x)/ (this.screenWidth/2) * this.moveRangeX + this.posX;\n         //let targetMoveY = ( evt._y - this.designResolutionHeight_2 ) / this.designResolutionHeight_2 *this.moveRangeY + this.posY;\n\n        // console.log(\"target\", targetX, targetY);\n        let currentX = this.sceneNodes[0].eulerAngles.x;\n        let currentY = this.sceneNodes[0].eulerAngles.y;\n\n        let timeY =  Math.abs(targetY - currentY)/this.rotRangeY;\n        let timeX = Math.abs(targetX - currentX)/this.rotRangeX;\n        //console.log('time', timeX, timeY);\n        \n         for(let i = 0; i < this.sceneNodes.length; i++){\n            \n            let rotate3DTo = cc.rotate3DTo(Math.max(timeX, timeY), cc.v3(targetX + this.infos[i].x, targetY +  this.infos[i].y, 0));\n           // let move3DTo = cc.moveTo(1, cc.v3(targetMoveX, targetMoveY, 0));\n           //console.log(targetMoveX,targetMoveY);\n           // this.cameras[i].node.stopAllActions();\n           // this.cameras[i].node.runAction(cc.spawn(rotate3DTo, move3DTo));\n\n           \n            this.sceneNodes[i].stopAllActions();\n           this.sceneNodes[i].runAction(rotate3DTo.easing(cc.easeOut(1.0)));\n         }\n        \n    },\n});","cc.Class({\n    extends: cc.Component,\n\n    properties:{\n        stage:cc.Node,\n        eye: cc.Node,\n        isLeft : cc.Boolean\n    },\n\n    onLoad () {\n        this.randX =8;\n        this.randY = 1.5;\n       // this.stage.on(cc.Node.EventType.TOUCH_MOVE, this.touchMoveHandler, this);\n       // this.stage.on(cc.Node.EventType.MOUSE_MOVE, this.mouseMoveHandler, this);\n    },\n\n    touchMoveHandler(evt){\n        //console.log(evt);\n    },\n\n    mouseMoveHandler(evt){\n        \n        let worldPos = this.stage.convertToWorldSpaceAR(cc.v2(evt.getLocationX(), evt.getLocationY()));\n        //console.log(\"world\",worldPos.x, worldPos.y);\n        worldPos = cc.v2(evt.getLocationX(), evt.getLocationY());\n        let pos = this.node.convertToNodeSpaceAR(worldPos);\n        //console.log(pos.x , pos.y);\n\n        //this.eye.setPosition(pos.x, pos.y);\n\n        let  len = 0;\n        let tan = 0;\n        let ctan  = 0;\n\n        let posX = 0;\n        let posY = 0;\n\n        if(pos.x!= 0 && pos.y !=0){\n\n            let mouseLen2 = Math.pow(pos.x, 2) * Math.pow(pos.y, 2)/(Math.pow(pos.x, 2) + Math.pow(pos.y, 2));\n            if(mouseLen2 > Math.pow(150, 2)){\n                posX = 0;\n                posY = 0;\n\n            }\n            else{\n                let factor = Math.min(Math.pow(mouseLen2, 0.5) / 40 , 1);\n                //factor = Math.pow(factor, 2);\n                if(this.isLeft){\n                    pos.x -= 40 * factor;\n                }\n                else{\n                    pos.x += 40 * factor;\n                }\n                if(pos.x < 0){\n                    pos.x = Math.max(pos.x, -8);\n                }\n                else{\n                    pos.x = Math.min(pos.x, 8);\n                }\n                if(pos.y < 0){\n                    pos.y = Math.max(pos.y, -2.5);\n                }\n                else{\n                    pos.y = Math.min(pos.y, 2.5);\n                }\n                let len2 = Math.pow(pos.x, 2) * Math.pow(pos.y, 2)/(Math.pow(pos.x, 2) + Math.pow(pos.y, 2));\n                len = Math.pow(len2, 0.5);\n            \n                tan = pos.y / len;\n                ctan = pos.x / len;\n\n                posX = len * ctan;\n                posY = len * tan;\n\n            }\n           \n        }\n\n        this.eye.setPosition(posX, posY);\n        //console.log(\"set pos\", posX, posY);\n\n    }\n})","// Learn cc.Class:\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        editBox:cc.EditBox,\n        audioID:-1, \n        mouthNode: cc.Node,\n        mouthIsReset: true,\n        historyObjects: [],\n        sendButton: cc.Node\n        \n    },\n\n    onLoad () {\n\n        let isLocalHost = false;\n        if(window.location.href.indexOf(\"localhost\")!=-1 || window.location.href.indexOf(\"127.0.0.1\")!=-1){\n            isLocalHost = true;\n        }\n        console.log(\"isLocalHost\", isLocalHost);\n\n       /* this.urlAddress = isLocalHost ? \"http://127.0.0.1:3000\":\"http://13.115.222.147:3000\";\n        this.socket = new window.io(this.urlAddress, {transports: ['websocket', 'polling', 'flashsocket']});\n\n        this.socket.on(\"connect\", this.handleConnect.bind(this));\n        this.socket.on(\"onTTSCompleted\", this.onTTSCompleted.bind(this));*/\n        this.onTextLenChange(this.editBox.string);\n    },\n\n    handleConnect(){\n        console.log('connected', this.socket.id); \n    },\n\n    onTTSCompleted(info){\n        if(!info){\n            return;\n        }\n\n        this.audioInfo = info.lip_sync_animation;\n\n        let remoteUrl =  info.audio_file_link;\n        cc.loader.load({url: remoteUrl, type: 'wav'}, function (err, res) {\n            // Use texture to create sprite frame\n            this.audioID = cc.audioEngine.play(res);\n            this.audioOffset = 0;\n            this.updateMouth();\n            \n            cc.audioEngine.setFinishCallback(this.audioID, function () {\n                this.audioID = -1;\n                this.mouthIsReset = false;\n            }.bind(this));\n        }.bind(this));\n    }, \n\n    sendHandler(){\n        let sendText = this.editBox.string;\n        if(sendText.trim().length == 0){\n            return;\n        }\n        //this.socket.emit(\"tts\", sendText);\n        let that = this;\n        let xhr = new XMLHttpRequest();\n                            \n        let requestURL = \"http://40.121.137.102/messages/\";      \n        xhr.onreadystatechange = function() {\n            if (xhr.readyState == XMLHttpRequest.DONE) {\n                if(xhr.status == 200){\n                    let json = JSON.parse(xhr.responseText);\n                    that.onTTSCompleted(json);\n\n                    that.historyObjects.push({\"index\":that.historyObjects.length, \"reply\":json.reply, \"message\":json.message});\n                }\n            }\n        }\n        let params = JSON.stringify({\"message\":sendText, hitory: this.historyObjects});\n        xhr.open('POST', requestURL, true);\n        xhr.setRequestHeader('Content-type', 'application/json');\n        xhr.send(params);\n    }, \n\n    updateMouth(){\n        //audio_offset_ms: 1162.5, viseme_id: 11}\n        let id =  this.audioInfo[this.audioOffset].viseme_id;\n\n        let node = this.mouthNode.getChildByName(\"mouth_\" + id);\n        if(node){\n            for(let i = 0; i <= 21; i++){\n                let node2 = this.mouthNode.getChildByName(\"mouth_\" + i);\n                node2.active = false;\n            }\n            node.active = true;\n        }\n    },\n\n    update (dt){\n        if(this.audioID != -1){\n            let time = cc.audioEngine.getCurrentTime( this.audioID )\n\n            while( this.audioInfo.length > this.audioOffset \n                && (this.audioInfo[this.audioOffset ].audio_offset_ms < time * 1000 + 15))\n                {\n               // && ((this.audioOffset + 1 >= this.audioInfo.length) || (Math.abs(this.audioInfo[this.audioOffset ].audioOffset - time* 1000 ) > (this.audioInfo[this.audioOffset +1].audioOffset - time* 1000 )))){\n                this.updateMouth();\n                this.audioOffset += 1;\n\n            }\n        }\n        else{\n            if(!this.mouthIsReset){\n                this.mouthIsReset = true;\n                this.mouthNode.getChildByName(\"mouth_0\").active = true;\n\n                for(let i = 1; i <= 21; i++){\n                    let node2 = this.mouthNode.getChildByName(\"mouth_\" + i);\n                    node2.active = false;\n                }\n            }\n        } \n    },\n\n    onTextLenChange (textContent){\n        this.sendButton.active = textContent.length != 0\n    }\n     \n\n    // update (dt) {},\n});\n","// Learn cc.Class:\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        progressBar:cc.ProgressBar,\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {},\n\n    onLoad () {\n        cc.director.preloadScene(\"game\", this.onProgress.bind(this), this.onComplete.bind(this));\n    },\n\n    onProgress(completedCount, totalCount){\n        this.progressBar.progress = completedCount/totalCount;\n    },\n\n    onComplete(error){\n        if(!error){\n            cc.director.loadScene(\"game\");\n        }\n\n    }\n\n    \n});\n","cc.Class({\n    extends: cc.Component,\n\n    properties:{\n        onNode: cc.Node,\n        offNode:cc.Node,\n        hintNode: cc.Node,\n        hintText: cc.Label,\n        audioId: null,\n        music: {    type: cc.AudioClip, \n        default: null },\n        anim: cc.Animation\n    },\n\n    onLoad(){\n        this.isMusicOn = cc.sys.localStorage.getItem(\"music\");\n        if(this.isMusicOn == null){\n            this.isMusicOn = true;\n        }\n\n        if(this.isMusicOn){\n            this.toggleOn();\n            /*setTimeout(function(){ \n                cc.sys.__audioSupport.context.resume();\n                cc.game.canvas.dispatchEvent(new Event(\"mousedown\"))\n            }, 3000);*/\n        }\n        else{\n            this.toggleOff();\n        }\n        \n\n\n       // this.node.on(\"mouseOver\")\n\n    },\n\n    toggleOver(){\n        this.hintNode.active = true;\n    },\n\n    toggleOut(){\n        this.hintNode.active = false;\n    },\n\n\n    toggleOff(){\n        this.onNode.active = true;\n        this.offNode.active = false;\n        this.hintText.string = \"Turn Volumn On\";\n\n        if(this.audioId!=null){\n            cc.audioEngine.pauseMusic();\n        }\n\n        \n    },\n\n    toggleOn(){\n        this.offNode.active = true;\n        this.onNode.active = false;\n        this.hintText.string = \"Turn Volumn Off\";\n\n        if(!this.audioId){\n            this.audioId = cc.audioEngine.playMusic(this.music, true);\n        }\n        else{\n            cc.audioEngine.resumeMusic();\n        }\n    }\n\n});"],"file":"project.dev.js"}